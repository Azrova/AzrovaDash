<%- include('partials/dashboard_header', { pageTitle: 'My Servers', title: title }) %>

<div class="flex flex-wrap justify-between items-center gap-4 mb-6">
    <h1 class="text-2xl font-semibold text-gray-100">My Servers</h1>
    <div class="flex items-center space-x-4">
        <span class="text-sm text-gray-400">
            <%= currentServerCount %> / <%= serverLimit %> Servers Used
        </span>
        <% if (currentServerCount < serverLimit) { %>
            <a href="/servers/create" class="btn-primary bg-green-600 hover:bg-green-700">Create Server</a>
        <% } else { %>
            <button class="btn-primary bg-gray-600 cursor-not-allowed" disabled>Server Limit Reached</button>
        <% } %>
    </div>
</div>

<% if (typeof error !== 'undefined' && error) { %>
    <div class="alert alert-error" role="alert">
        <strong class="font-bold">Error:</strong>
        <span class="block sm:inline"><%= error %></span>
    </div>
<% } %>

<% if (servers && servers.length > 0) { %>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <% servers.forEach(server => { %>
            <div class="bg-gray-800 p-6 rounded-lg shadow-md hover:shadow-xl transition-shadow duration-200">
                <div class="flex justify-between items-center mb-3">
                    <h2 class="text-lg font-semibold text-white truncate"><%= server.attributes.name %></h2>
                    <span 
                        id="status-<%= server.attributes.uuid %>" 
                        class="text-xs px-2 py-1 rounded-full bg-gray-600 text-gray-100"
                        data-server-id="<%= server.attributes.uuid %>"
                    >
                        Checking...
                    </span>
                </div>
                <p class="text-sm text-gray-400 mb-1">UUID: <code class="text-xs"><%= server.attributes.uuid %></code></p>
                <p class="text-sm text-gray-400 mb-3">Node: <%= server.attributes.node %></p>
                <div class="flex justify-end space-x-2">
                    <a href="<%= process.env.PANEL_URL %>/server/<%= server.attributes.identifier %>" target="_blank" class="text-sm text-blue-400 hover:underline">Manage</a>
                    <button 
                        onclick="confirmDelete('<%= server.attributes.uuid %>', '<%= server.attributes.name %>')" 
                        class="text-sm text-red-400 hover:text-red-300 hover:underline"
                    >
                        Delete
                    </button>
                </div>
            </div>
        <% }); %>
    </div>
<% } else { %>
    <div class="bg-gray-800 p-8 rounded-lg shadow-md text-center">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-16 h-16 mx-auto text-gray-500 mb-4">
           <path stroke-linecap="round" stroke-linejoin="round" d="M9 17.25v1.007a3 3 0 0 1-.879 2.122L7.5 21h9l-.621-.621A3 3 0 0 1 15 18.257V17.25m6-12V15a2.25 2.25 0 0 1-2.25 2.25H5.25A2.25 2.25 0 0 1 3 15V5.25m18 0A2.25 2.25 0 0 0 18.75 3H5.25A2.25 2.25 0 0 0 3 5.25m18 0V12a2.25 2.25 0 0 1-2.25 2.25H5.25A2.25 2.25 0 0 1 3 12V5.25" />
        </svg>
        <p class="text-gray-400 mb-4">You don't have any servers yet.</p>
         <% if (currentServerCount < serverLimit) { %>
            <a href="/servers/create" class="btn-primary bg-green-600 hover:bg-green-700">Create Your First Server</a>
        <% } else { %>
             <p class="text-sm text-gray-500">You have reached your server limit.</p>
        <% } %>
    </div>
<% } %>

<div id="deleteModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-40 flex items-center justify-center">
    <div class="bg-gray-800 p-6 rounded-lg shadow-xl max-w-md w-full mx-4">
        <h3 class="text-xl font-semibold text-gray-100 mb-4">Delete Server</h3>
        <p class="text-gray-300 mb-2">Are you sure you want to delete this server?</p>
        <p class="text-gray-400 text-sm mb-6" id="serverToDelete"></p>
        <div class="flex justify-end space-x-4">
            <button onclick="closeDeleteModal()" class="px-4 py-2 text-sm text-gray-400 hover:text-gray-300">
                Cancel
            </button>
            <button onclick="deleteServer()" class="px-4 py-2 text-sm bg-red-600 text-white rounded hover:bg-red-700">
                Delete Server
            </button>
        </div>
    </div>
</div>

<script>
let serverToDeleteId = '';

function confirmDelete(serverId, serverName) {
    serverToDeleteId = serverId;
    document.getElementById('serverToDelete').textContent = `Server: ${serverName}`;
    document.getElementById('deleteModal').classList.remove('hidden');
}

function closeDeleteModal() {
    document.getElementById('deleteModal').classList.add('hidden');
    serverToDeleteId = '';
}

async function deleteServer() {
    if (!serverToDeleteId) return;

    try {
        const response = await fetch(`/servers/${serverToDeleteId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            window.location.reload();
        } else {
            const data = await response.json();
            alert(data.error || 'Failed to delete server');
        }
    } catch (error) {
        alert('An error occurred while deleting the server');
        console.error('Error:', error);
    }

    closeDeleteModal();
}

document.getElementById('deleteModal').addEventListener('click', function(e) {
    if (e.target === this) {
        closeDeleteModal();
    }
});

const statusColors = {
    'running': 'bg-green-600 text-green-100',
    'starting': 'bg-yellow-600 text-yellow-100',
    'installing': 'bg-blue-600 text-blue-100',
    'offline': 'bg-red-600 text-red-100',
    'error': 'bg-gray-600 text-gray-100'
};

const statusTexts = {
    'running': 'Online',
    'starting': 'Starting',
    'installing': 'Installing',
    'offline': 'Offline',
    'error': 'Error'
};

async function checkServerStatus(serverId) {
    try {
        const response = await fetch(`${window.location.origin}/servers/${serverId}/status`);
        if (!response.ok) throw new Error('Failed to fetch status');
        
        const data = await response.json();
        const statusElement = document.getElementById(`status-${serverId}`);
        
        if (statusElement) {
            Object.values(statusColors).forEach(className => {
                const classes = className.split(' ');
                statusElement.classList.remove(...classes);
            });
            
            const newClasses = statusColors[data.status] || statusColors.error;
            statusElement.classList.add(...newClasses.split(' '));
            
            statusElement.textContent = statusTexts[data.status] || 'Unknown';
        }
    } catch (error) {
        console.error(`Error checking status for server ${serverId}:`, error);
        const statusElement = document.getElementById(`status-${serverId}`);
        if (statusElement) {
            const errorClasses = statusColors.error.split(' ');
            statusElement.classList.remove(...Object.values(statusColors).flatMap(c => c.split(' ')));
            statusElement.classList.add(...errorClasses);
            statusElement.textContent = 'Error';
        }
    }
}

document.querySelectorAll('[data-server-id]').forEach(element => {
    const serverId = element.dataset.serverId;
    checkServerStatus(serverId);
});

setInterval(() => {
    document.querySelectorAll('[data-server-id]').forEach(element => {
        const serverId = element.dataset.serverId;
        checkServerStatus(serverId);
    });
}, 30000);
</script>

<%- include('partials/footer') %>
